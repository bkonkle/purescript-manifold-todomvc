#!/usr/bin/env babel-node
import {exec} from 'child-process-promise'
import path from 'path'
import ygor from 'ygor'

const PROJECT_DIR = path.dirname(__dirname)
const SRC = `${PROJECT_DIR}/src`
const LIB = `${PROJECT_DIR}/lib`
const BUILD = `${PROJECT_DIR}/build`
const DEV_SERVER = 'Todo.Server.Development'

const nodePath = prepend => `NODE_PATH=${prepend.join(':')}:${process.env.NODE_PATH || ''}`

function sleep (ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

function babel (options = '') {
  return `babel ${LIB} --source-maps --out-dir ${BUILD} ${options}`
}

function pulp (cmd) {
  return `${nodePath([SRC, BUILD])} pulp ${cmd}`
}

/*
 * Tasks
 */

function clean () {
  ygor.shell('rm -r build dist output 2> /dev/null || true')
}

function lint () {
  return exec('standard src/**/*.js,lib/**/*').then(result => console.log(result.stdout))
}

async function client () {
  await javascript()
  ygor.shell(`${nodePath([SRC, BUILD])} webpack --config=webpack.${process.env.NODE_ENV}.js --color=always --progress`)
}

function dev () {
  ygor.shell(pulp(`run --main ${DEV_SERVER}`))
}

async function javascript () {
  await lint()
  ygor.shell(babel())
}

async function javascriptWatch () {
  await lint()
  ygor.shell(babel('-w')).then(result => console.log(result.stdout))
}

async function purescript () {
  await javascript()
  ygor.shell(pulp('build'))
}

function purescriptJson () {
  ygor.shell(pulp('build --no-psa --json-errors'))
}

function purescriptRepl () {
  ygor.shell(pulp('psci'))
}

function test () {
  ygor.shell(pulp('test'))
}

// Intended to be run with "dev" in another terminal window
function watch () {
  ygor.shell(`${nodePath([SRC, BUILD])} pscid --test`)
}

/*
 * Interface
 */

ygor
  .task('default', client)
  .task('clean', clean)
  .task('client', client)
  .task('dev', dev)
  .task('javascript', () => ygor()
    .task('default', javascript)
    .task('watch', javascriptWatch)
  )
  .task('purescript', () => ygor()
    .task('default', purescript)
    .task('json', purescriptJson)
    .task('repl', purescriptRepl))
  .task('test', test)
  .task('watch', watch)
